import os
import subprocess
import argparse
import csv
import time

# --- Configuration ---
MT5_PATH = "C:/Program Files/MetaTrader 5/terminal64.exe"
CONFIG_PATH = "C:/MetaQuotes/Terminal/D0E8209F77C8CF37AD8BF550E51FF075/config/config.ini"
REPORTS_DIR = "C:/MetaQuotes/Terminal/D0E8209F77C8CF37AD8BF550E51FF075/Tester/"
SETFILE_CONFIG = "C:/MetaQuotes/Terminal/D0E8209F77C8CF37AD8BF550E51FF075/Profiles/Tester/setfile_config.csv"
os.makedirs(os.path.dirname(CONFIG_PATH), exist_ok=True)
os.makedirs(REPORTS_DIR, exist_ok=True)

def parse_arguments():
    """Parse command-line arguments for dynamic configuration."""
    parser = argparse.ArgumentParser(description="Run MT5 forward test.")
    parser.add_argument("--symbol", required=True, help="Trading symbol (e.g., XAUUSD).")
    parser.add_argument("--from_date", required=True, help="Start date (YYYY.MM.DD).")
    parser.add_argument("--to_date", required=True, help="End date (YYYY.MM.DD).")
    parser.add_argument("--deposit", type=float, default=10000, help="Initial deposit amount.")
    parser.add_argument("--leverage", type=int, default=33, help="Leverage ratio.")
    return parser.parse_args()

def validate_arguments(args):
    """Validate the provided arguments."""
    if args.from_date >= args.to_date:
        raise ValueError("FROM_DATE must be earlier than TO_DATE.")

def generate_config_file(args):
    """Generate the configuration file for the MQL5 script."""
    config_content = f"""Symbol={args.symbol}
StartDate={args.from_date}
EndDate={args.to_date}
Deposit={args.deposit}
Leverage={args.leverage}
"""
    with open(CONFIG_PATH, "w") as config_file:
        config_file.write(config_content)
    print("‚úÖ Configuration file generated.")

def run_mql5_script():
    """Run the MQL5 batch backtest script."""
    cmd = [f'"{MT5_PATH}"', "/portable", "/script:run_batch_backtests.mq5"]
    cmd_str = " ".join(cmd)
    print(f"Launching MQL5 batch backtest script with command: {cmd_str}")

    try:
        subprocess.run(cmd_str, shell=True, check=True, timeout=300)
        print("‚úÖ MQL5 batch backtest script completed.")
    except subprocess.TimeoutExpired:
        print("‚ùå MQL5 script timed out.")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error while running MQL5 script: {e}")

def validate_test_settings():
    """Validate the settings for each test in the batch."""
    if not os.path.exists(SETFILE_CONFIG):
        print(f"‚ùå Missing setfile configuration CSV: {SETFILE_CONFIG}")
        return

    with open(SETFILE_CONFIG, "r") as csv_file:
        reader = csv.DictReader(csv_file)
        for row in reader:
            setfile = row["setfile"]
            symbol = row["symbol"]
            timeframe = row["timeframe"]
            from_date = row["from_date"]
            to_date = row["to_date"]

            print(f"üîç Validating test: {setfile}, {symbol}, {timeframe}, {from_date} ‚Üí {to_date}")

            # Check if setfile exists
            setfile_path = f"C:/MT5_Backtest/MQL5/Profiles/Tester/{setfile}"
            if not os.path.exists(setfile_path):
                print(f"‚ùå Missing .set file: {setfile_path}")
                continue
            # Additional validation can be added here

    print("‚úÖ All test settings validated.")

def post_process_results():
    """Post-process the results generated by the MQL5 script."""
    if os.path.exists(REPORTS_DIR):
        print(f"‚úÖ Results are available in the directory: {REPORTS_DIR}")
    else:
        print("‚ùå No results found. Check the MQL5 script execution.")

def monitor_status_log(status_file):
    print("Monitoring status log...")
    with open(status_file, 'r') as log:
        log.seek(0, 2)  # Move to the end of the file
        while True:
            line = log.readline()
            if not line:
                time.sleep(1)  # Wait for new log entries
                continue
            print(line.strip())

def analyze_results(reports_dir):
    import os
    print("Analyzing results...")
    passed = 0
    failed = 0
    for report in os.listdir(reports_dir):
        if report.endswith("_result.html"):
            # Simplified check: assume presence of report means success
            passed += 1
        else:
            failed += 1
    print(f"Results: {passed} passed, {failed} failed")

if __name__ == "__main__":
    try:
        args = parse_arguments()
        validate_arguments(args)
        generate_config_file(args)
        validate_test_settings()
        run_mql5_script()
        post_process_results()
        print("‚úÖ Forward test completed.")
    except Exception as e:
        print(f"‚ùå Error: {e}")

    status_file = "C:\\EA_Validation_Project\\status.log"
    reports_dir = "C:\\EA_Validation_Project\\test_reports\\"

    # Start monitoring in a separate thread or process if needed
    monitor_status_log(status_file)

    # Analyze results after monitoring or in parallel
    analyze_results(reports_dir)
